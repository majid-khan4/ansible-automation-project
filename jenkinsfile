pipeline {
    agent any
    
    environment {
        SLACK_CHANNEL = '#6th-october-2025-pet-adoption-auto-discovery-project-eu-team1'
    }
    
    parameters {
        choice(
            name: 'TERRAFORM_ACTION',
            choices: ['apply', 'destroy'],
            description: 'Terraform action to perform'
        )
        booleanParam(
            name: 'SKIP_CHECKOV',
            defaultValue: false,
            description: 'Skip Checkov security scan'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh 'ls -la'  // Debug: Check directory structure
            }
        }
        
        stage('Install Terraform') {
            steps {
                sh '''
                    echo "Installing Terraform on RHEL 9..."
                    
                    # Install required dependencies
                    sudo dnf install -y yum-utils
                    
                    # Add HashiCorp repository
                    sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
                    
                    # Install Terraform
                    sudo dnf install -y terraform
                    
                    # Verify installation
                    terraform --version
                '''
            }
        }
        
        stage('Checkov Security Scan') {
            when {
                expression { 
                    return !params.SKIP_CHECKOV 
                }
            }
            steps {
                sh '''
                    echo "Running Checkov security scan..."
                    
                    # Install Podman if not available
                    if ! command -v podman &> /dev/null; then
                        sudo dnf install -y podman
                    fi
                    
                    # Run Checkov - scan current directory if terraform/ doesn't exist
                    if [ -d "terraform" ]; then
                        echo "Scanning terraform/ directory"
                        podman run --rm -v $(pwd):/src bridgecrew/checkov:latest -d /src/terraform --quiet --compact --framework terraform
                    else
                        echo "Scanning current directory for Terraform files"
                        podman run --rm -v $(pwd):/src bridgecrew/checkov:latest -d /src --quiet --compact --framework terraform
                    fi
                '''
            }
        }
        
        stage('Terraform Init') {
            steps {
                script {
                    // Check if terraform directory exists, otherwise use current directory
                    if (fileExists('terraform')) {
                        dir('terraform') {
                            sh 'terraform init'
                        }
                    } else {
                        sh 'terraform init'
                    }
                }
            }
        }
        
        stage('Terraform Apply/Destroy') {
            steps {
                script {
                    if (fileExists('terraform')) {
                        dir('terraform') {
                            executeTerraformAction()
                        }
                    } else {
                        executeTerraformAction()
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh 'rm -rf .terraform terraform/tfplan* || true'
        }
        
        success {
            slackSend(
                channel: env.SLACK_CHANNEL,
                color: 'good',
                message: """✅ Infrastructure Pipeline SUCCESS
Action: ${params.TERRAFORM_ACTION}
Build: ${env.BUILD_URL}"""
            )
        }
        
        failure {
            slackSend(
                channel: env.SLACK_CHANNEL,
                color: 'danger',
                message: """❌ Infrastructure Pipeline FAILED
Action: ${params.TERRAFORM_ACTION}
Build: ${env.BUILD_URL}"""
            )
        }
    }
}

// Helper function for Terraform actions
def executeTerraformAction() {
    if (params.TERRAFORM_ACTION == 'apply') {
        sh '''
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
        '''
    } else if (params.TERRAFORM_ACTION == 'destroy') {
        sh 'terraform destroy -auto-approve'
    }
}